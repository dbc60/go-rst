=========================================
The reStructuredText Test Data For GO-RST
=========================================
:Modified: Tue May 05 12:24 2015

These test files have been transcoded from the docutils "pseudo xml" format
into standard JSON.

Some of these tests have been changed to conform to the parser and lexer
provided by the go-rst package. The docutils parser is much more complex, so
some test results don't apply to the go-rst parser.

--------------------
Test Layout Overview
--------------------

* The tests are broken down into catagories, with each directory containing
  sub-catagories.
* There are currently three files per test: the rst file, the expected lexer
  output "items.json", and the expected parser output "nodes.json".
* The sub-directories of each category end with "good" or "bad" to indicate how
  the parser is expected to parse the test. Directories ending with "good" are
  proper syntax and are expected to be parsed correctly. Directories ending
  with "bad" usually means the parser is going to generate a system message or
  two.
* Each test file begins with a number syntax formatted with two leading digits,
  a decimal, and two trailing digits: "00.00" This is to allow for
  incrementally adding additional variations of a single test while keeping
  the file names unique.

----------
items.json
----------

The items.json files describes tokens generated by the lexer. It contains a
json array of the following object:

.. code:: json

    {
        "id": 9,
        "type": "itemInlineEmphasis",
        "text": "emphasis",
        "startPosition": 5,
        "line": 4,
        "length": 8
    }

id
  A sequential numerical identifier given to the lexed item.

type
  The type of token found by the lexer.

text
  The actual text of the token. This excludes the actual markup. For emphasized
  text written in the document as ``*emphasis``, the text would only contain
  ``emphasis``.

startPosition
  The start position in the line of the lexed token. This is the byte position
  in the line of text.

line
  The line location within the file.

length
  The actual length of the lexed token. This is the number of runes in the text
  and is not the length in bytes.

----------
nodes.json
----------

This files describes the object tree generated by the parser.

---------------
Differing Tests
---------------

1. Test: test-section/06-title-with-overline-bad/03.01-incomplete-sections-no-title.rst

   From: docutils/test/test_parsers/test_rst/test_section_headers.py line: 787

   The expected results by the docutils package do not make any sense at all.
   It seems the test is only to make sure the parser does not crash. So I
   modified the expected results to conform to the current output of the go-rst
   parser. Naturally the output is very different.

#. Test: test-inline-markup/00-emphasis-good/01.00-emphasis-with-emphasis-apostrophe.rst
   From: docutils/test/test_parsers/test_rst/test_inline_markup.py line: 33

   Tests apostrophe handling, I think... Not really sure of the purpose of this test.
   rst2html shows the following output, which appears broken:

   .. code:: html

      <p>l'<em>emphasis</em> with the <em>emphasis</em>' apostrophe.
      lu2019*emphasis* with the <em>emphasis</em>u2019 apostrophe.</p>

#. Test: test-inline-markup/00-inline-markup-recognition-rules-good/00.00-double-underscore.rst
   From: http://repo.or.cz/w/docutils.git/blob/HEAD:/docutils/test/test_parsers/test_rst/test_inline_markup.py#l1594

   The markup::

     text-*separated*\u2010*by*\u2011*various*\u2012*dashes*\u2013*and*\u2014*hyphens*.
     \u00bf*punctuation*? \u00a1*examples*!\u00a0*\u00a0no-break-space\u00a0*.

   Tests recognition rules with unicode literals. \u00a0 is "No Break Space".

   Output from rst2html.py (docutils v0.12)::

     <p>text-<em>separated</em>u2010*by*u2011*various*u2012*dashes*u2013*and*u2014*hyphens*.
     u00bf*punctuation*? u00a1*examples*!u00a0*u00a0no-break-spaceu00a0*.</p>

   According to the reStructuredText spec, whitespace after an inline markup
   start string are not allowed, but this test clearly shows that it is. The
   troublesome section is ``\u00a0*\u00a0no-break-space\u00a0*`` as the parser
   cannot detect the '*' start string (based on the spec). As mentioned in the
   previous trouble item, the docutils parser does not correctly use unicode
   literals.

   I have modified this test to remove the troublesome section.
