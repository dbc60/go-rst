* Wed Jun 14 16:07 2017: test IDs not completely unique (merge good and bad tests) into single directory

  Make thes tests have a unique ID.

  testdata/09-test-list-definition/02-bad/09.00.02.00-bad-def-list-with-inline-markup-errors.rst
  testdata/09-test-list-definition/02-bad/09.00.02.00-bad-def-list-with-inline-markup-errors-nodes-xx.json
  testdata/09-test-list-definition/02-bad/09.00.02.00-bad-def-list-with-inline-markup-errors-items-xx.json
  testdata/09-test-list-definition/01-good/09.00.02.00-def-list-two-terms-nodes-xx.json
  testdata/09-test-list-definition/01-good/09.00.02.00-def-list-two-terms-items-xx.json
  testdata/09-test-list-definition/01-good/09.00.02.00-def-list-two-terms.rst

  Merge

  testdata/09-test-list-definition/09.00.02.02.00-bad-def-list-with-inline-markup-errors.rst

  testdata/09-test-list-definition/09.00.01.02.00-def-list-two-terms.rst


  $ find testdata -iname "*.json" -exec basename {} \; | sort -t , -k 1 | grep -o -P "[\d\.]{4,}" | uniq -c | sort -rn
        4 09.00.02.00
        4 09.00.01.00
        4 09.00.00.01
        4 09.00.00.00
        4 08.00.05.00
        4 08.00.04.00
        4 08.00.03.00
        4 08.00.02.00
        4 08.00.01.00
        4 08.00.00.00
        4 07.00.01.00
        4 07.00.00.00
        4 05.00.02.00
        4 05.00.01.00
        4 05.00.00.02
        4 05.00.00.01
        4 05.00.00.00
        4 01.00.04.01
        4 01.00.04.00
        4 01.00.03.00
        4 01.00.02.00
        4 01.00.01.00
        4 01.00.00.03
        4 01.00.00.02
        4 01.00.00.01
        4 01.00.00.00

* Thu Jun 15 03:12 2017: Write a tool to regen the rst tests automatically

  This will reduce the number of files in the project greatly and also make it slightly easier to refactor tests if needed.

  The rst test files can be limited to:

  - lexer_rst_test.go
  - parser_rst_test.go

  This CLI tool will get all the files in the test directories, sort the list, and generate a huge test file for Go
  automatically.

* Tue Oct 11 00:10 2016: add a document listing the un-implemented tests

  - DONE - Files with -xx in the names in testdata are tests that are not-implemented. Publish a link in README.rst in the
    How to help section.

  - Finish writing how to implement an element (and test)

    * Document example test import for option lists.

    * The UltiSnips Snippets should be mentioned with snippets published to the repo.

      - Use some inline markup test as an example implementation.

	* document naming of bad tests (should include -bads after id)

    * Document debugging tips

    * Document regenerating the tests

    * section tests need to be moved into subgroups::

        ▾ 04-test-section/
          ▾ 01-good/
              04.00.00.00-title-paragraph.rst
              04.01.00.00-section-level-return.rst
              04.02.00.00-title-overline.rst

      Should be::

        ▾ 04-test-section/
          ▾ 00-simple-title/
            ▾ 01-good/
                04.00.00.00-title-paragraph.rst
          ▾ 01-levels/
            ▾ 01-good/
                04.01.00.00-section-level-return.rst
          ▾ 02-title-overline/
            ▾ 01-good/
                04.02.00.00-title-overline.rst

* Sun Feb 26 14:09 2017: Convert test checks to use testify package

* Sat Feb 20 01:10 2016: Should we convert char12 and vert tab to spaces before proccessing?

  From the spec:

  Other whitespace characters (form feeds [chr(12)] and vertical tabs [chr(11)]) are converted to single spaces before processing.

  - Complete whitespace handling. See the first three items in the implementation status doc

  - This might require renumbering the tests because whitespace handling is defined first in the spec...

    - If the tests are renumbered, the implementation doc test examples will need to be updated.

* Sun Jun 11 12:35 2017: re-order tests

  - Order should look like::

    ▸ 00-test-whitespace/
    ▸ 01-test-comment/
    ▸ 02-test-reference-hyperlink-targets/
    ▸ 03-test-paragraph/
    ▸ 04-test-inline-markup/
    ▸ 05-test-list-bullet/
    ▸ 06-test-section/
    ▸ 07-test-blockquote/
    ▸ 08-test-literal-block/
    ▸ 09-test-list-enumerated/
    ▸ 10-test-list-definition/
    ▸ 11-test-list-field/
    ▸ 12-test-list-option/
    ▸ 13-test-directives/
    ▸ 14-test-reference-citations/
    ▸ 15-test-reference-substitution-definitions/
    ▸ 16-test-reference-footnotes/
    ▸ 17-test-tables/
    ▸ 18-test-transitions/
    ▸ 19-test-doctest/

  - Update examples in implementation.rst

* Sun Feb 14 22:38 2016: Fix gocyclo on https://goreportcard.com/report/github.com/demizer/go-rst

* Sun Jun 11 11:03 2017: Get coverage reports above 95%

* Thu Oct 20 00:41 2016: IMPLEMENT GOOD TESTS FOR INLINE MARKUP

* Mon Oct 10 17:53 2016: sectionLevels.Add() should be renamed to AddOrReuse()

  In section.go#145 a section is added or existing is returned. We should rename this function from Add() to AddOrReuse() for
  self documentation.

* Mon Oct 10 01:44 2016: Need to add blockquote levels

  Like sectionLevels, but for blockquotes. Currently set to use a hack so I can get all the tests to pass.

  Try to make indentQueue more general; perhaps we can use it for blockquotes as well as bullet lists.

* Mon Oct 10 01:27 2016: Debug output should be more like the rst2psuedo command

  I like how this debug output prints the current line and what state the state machine is in. We should use something
  similar.

  Example:

  rst2pseudoxml testdata/04-test-section/02-bad/04.00.04.00-unexpected-titles.rst --debug
