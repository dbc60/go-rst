// Package parse is a reStructuredText parser implemented in Go!
//
// This package is only meant for lexing and parsing reStructuredText. See the top level package documentation for details on
// using the go-rst package package API.
package parse

import (
	"fmt"
	"os"

	"github.com/apex/log"
	"github.com/apex/log/handlers/text"
	"github.com/davecgh/go-spew/spew"
	"golang.org/x/text/unicode/norm"
)

// Used for debugging only
var spd = spew.ConfigState{Indent: "\t"} //, DisableMethods: true}

// Log is the default logging object. By default, all output is discarded. Set Log.Out to std.Stdout to enable output. The
// level of the log output can also be set in this manner. See the documentation of the logrus package for other options.
var Log = &log.Logger{
	Handler: text.New(os.Stdout),
	Level:   log.InfoLevel,
}

// systemMessageLevel implements four levels for messages and is used in conjunction with the parserMessage type.
type systemMessageLevel int

const (
	levelInfo systemMessageLevel = iota
	levelWarning
	levelError
	levelSevere
)

var systemMessageLevels = [...]string{
	"INFO",
	"WARNING",
	"ERROR",
	"SEVERE",
}

// String implments Stringer and return a string of the systemMessageLevel.
func (s systemMessageLevel) String() string {
	return systemMessageLevels[s]
}

// FromString returns the systemMessageLevel converted from the string name.
func systemMessageLevelFromString(name string) systemMessageLevel {
	for num, sLvl := range systemMessageLevels {
		if name == sLvl {
			return systemMessageLevel(num)
		}
	}
	return -1
}

// parserMessage implements messages generated by the parser. Parser messages are leveled using systemMessageLevels.
type parserMessage int

const (
	parserMessageNil parserMessage = iota
	infoOverlineTooShortForTitle
	infoUnexpectedTitleOverlineOrTransition
	infoUnderlineTooShortForTitle
	warningShortOverline
	warningShortUnderline
	warningExplicitMarkupWithUnIndent
	errorInvalidSectionOrTransitionMarker
	severeUnexpectedSectionTitle
	severeUnexpectedSectionTitleOrTransition
	severeIncompleteSectionTitle
	severeMissingMatchingUnderlineForOverline
	severeOverlineUnderlineMismatch
	severeTitleLevelInconsistent
)

var parserErrors = [...]string{
	"parserMessageNil",
	"infoOverlineTooShortForTitle",
	"infoUnexpectedTitleOverlineOrTransition",
	"infoUnderlineTooShortForTitle",
	"warningShortOverline",
	"warningShortUnderline",
	"warningExplicitMarkupWithUnIndent",
	"errorInvalidSectionOrTransitionMarker",
	"severeUnexpectedSectionTitle",
	"severeUnexpectedSectionTitleOrTransition",
	"severeIncompleteSectionTitle",
	"severeMissingMatchingUnderlineForOverline",
	"severeOverlineUnderlineMismatch",
	"severeTitleLevelInconsistent",
}

// String implements Stringer and returns the parserMessage as a string. The returned string is the parserMessage name, not
// the message itself.
func (p parserMessage) String() string {
	return parserErrors[p]
}

// Message returns the message of the parserMessage as a string.
func (p parserMessage) Message() (s string) {
	switch p {
	case infoOverlineTooShortForTitle:
		s = "Possible incomplete section title.\nTreating the overline as ordinary text because it's so short."
	case infoUnexpectedTitleOverlineOrTransition:
		s = "Unexpected possible title overline or transition.\nTreating it as ordinary text because it's so short."
	case infoUnderlineTooShortForTitle:
		s = "Possible title underline, too short for the title.\nTreating it as ordinary text because it's so short."
	case warningShortOverline:
		s = "Title overline too short."
	case warningShortUnderline:
		s = "Title underline too short."
	case warningExplicitMarkupWithUnIndent:
		s = "Explicit markup ends without a blank line; unexpected unindent."
	case errorInvalidSectionOrTransitionMarker:
		s = "Invalid section title or transition marker."
	case severeUnexpectedSectionTitle:
		s = "Unexpected section title."
	case severeUnexpectedSectionTitleOrTransition:
		s = "Unexpected section title or transition."
	case severeIncompleteSectionTitle:
		s = "Incomplete section title."
	case severeMissingMatchingUnderlineForOverline:
		s = "Missing matching underline for section title overline."
	case severeOverlineUnderlineMismatch:
		s = "Title overline & underline mismatch."
	case severeTitleLevelInconsistent:
		s = "Title level inconsistent."
	}
	return
}

// Level returns the parserMessage level.
func (p parserMessage) Level() (s systemMessageLevel) {
	lvl := int(p)
	switch {
	case lvl > 0 && lvl <= 3:
		s = levelInfo
	case lvl <= 6:
		s = levelWarning
	case lvl == 7:
		s = levelError
	case lvl >= 8:
		s = levelSevere
	}
	return
}

// sectionLevel is a single section level. sections contains a list of pointers to SectionNode that are dertermined to be a
// section of the level indicated by level. rChar is the rune character that denotes the section level.
type sectionLevel struct {
	rChar    rune
	level    int
	overLine bool           // True if the section level has an overline.
	sections []*SectionNode // Sections matching level.
}

// sectionLevels contains the encountered section levels in order by level.  levels[0] is section level 1 and levels[1] is
// section level 2.  lastSectionNode is a pointer to the lastSectionNode added to levels.
type sectionLevels struct {
	lastSectionNode *SectionNode
	levels          []*sectionLevel
}

// FindByRune loops through the sectionLevels to find a section using a Rune as the key. If the section is found, a pointer
// to the SectionNode is returned.
func (s *sectionLevels) FindByRune(rChar rune) *sectionLevel {
	for _, sec := range s.levels {
		if sec.rChar == rChar {
			return sec
		}
	}
	return nil
}

// Add determines if the underline rune in the sec argument matches any existing sectionLevel in sectionLevels. Add also
// checks the section level ordering is correct and returns a severeTitleLevelInconsistent parserMessage if inconsistencies
// are found.
func (s *sectionLevels) Add(sec *SectionNode) (err parserMessage) {
	level := 1
	secLvl := s.FindByRune(sec.UnderLine.Rune)

	// Local function for creating a sectionLevel
	var newSectionLevel = func() {
		var oLine bool
		if sec.OverLine != nil {
			oLine = true
		}
		Log.WithField("level", level).Debug("newSectionLevel: Creating new sectionLevel")
		secLvl = &sectionLevel{
			rChar: sec.UnderLine.Rune,
			level: level, overLine: oLine,
		}
		s.levels = append(s.levels, secLvl)
		// secLvl.sections = append(secLvl.sections, sec)
	}

	if secLvl == nil {
		if s.lastSectionNode != nil {
			// Check if the provisional level of sec is already in sectionLevels; if it is and the adornment
			// characters don't match, then we have an inconsistent level error.
			level = s.lastSectionNode.Level + 1
			nextLevel := s.SectionLevelByLevel(level)
			if nextLevel != nil &&
				nextLevel.rChar != sec.UnderLine.Rune {
				return severeTitleLevelInconsistent
			}
		} else {
			level = len(s.levels) + 1
		}
		newSectionLevel()
	} else {
		if secLvl.overLine && sec.OverLine == nil ||
			!secLvl.overLine && sec.OverLine != nil {
			// If sec has an OverLine, but the matching sectionLevel with the same Rune as sec does not have an
			// OverLine, then they are not in the same sectionLevel, and visa versa.
			level = len(s.levels) + 1
			newSectionLevel()
		} else {
			Log.WithField("sectionLevel", secLvl.level).Debug("add: using sectionLevel")
			level = secLvl.level
		}
	}

	secLvl.sections = append(secLvl.sections, sec)
	sec.Level = level
	s.lastSectionNode = sec
	return
}

// SectionLevelByLevel returns a pointer to a sectionLevel of level level. Nil is returned if l is greater than the number of
// section levels encountered.
func (s *sectionLevels) SectionLevelByLevel(level int) *sectionLevel {
	if level > len(s.levels) {
		return nil
	}
	return (s.levels)[level-1]
}

// LastSectionByLevel returns a pointer to the last section encountered by level.
func (s *sectionLevels) LastSectionByLevel(level int) (sec *SectionNode) {
exit:
	for i := len(s.levels) - 1; i >= 0; i-- {
		if (s.levels)[i].level != level {
			continue
		}
		for j := len((s.levels)[i].sections) - 1; j >= 0; j-- {
			sec = (s.levels)[i].sections[j]
			if sec.Level == level {
				Log.WithField("sectionLevel", sec.Level).Debug("LastSectionByLevel: found sectionLevel")
				break exit
			}
		}
	}
	return
}

// Parse is the entry point for the reStructuredText parser. Errors generated by the parser are returned as a NodeList.
func Parse(name, text string) (t *Tree, errors NodeList) {
	t = New(name, text)
	if !norm.NFC.IsNormalString(text) {
		text = norm.NFC.String(text)
	}
	t.Parse(text, t)
	errors = t.Messages
	return
}

// New returns a fresh parser tree.
func New(name, text string) *Tree {
	t := &Tree{
		Name:          name,
		text:          text,
		sectionLevels: new(sectionLevels),
		indentWidth:   indentWidth,
		log:           log.NewEntry(Log).WithField("unit", "parser"),
	}
	t.nodeTarget = &t.Nodes
	return t
}

const (
	// The middle of the Tree.token buffer so that there are three possible "backup" token positions and three forward
	// "peek" positions.
	zed = 4

	// Default indent width
	indentWidth = 4
)

// Tree contains the parser tree. The Nodes field contains the parsed nodes of the input input data.
type Tree struct {
	Name       string    // The name of the current parser input
	Nodes      NodeList  // The root node list
	Messages   NodeList  // Messages generated by the parser
	nodeTarget *NodeList // Used to append nodes to a target NodeList
	text       string    // The input text
	lex        *lexer
	token      [9]*item

	sectionLevels *sectionLevels // Encountered section levels
	sections      []*SectionNode // Pointers to encountered sections

	openBulletList *BulletListNode     // Open Bullet list
	definitionList *DefinitionListNode // Open definition list

	id          int // Consecutive id of the node in the tree
	indentWidth int
	indentLevel int

	log *log.Entry
}

// startParse initializes the parser, using the lexer.
func (t *Tree) startParse(lex *lexer) {
	t.lex = lex
}

// Parse activates the parser using text as input data. A parse tree is returned on success or failure. Users of the Parse
// package should use the Top level Parse function.
func (t *Tree) Parse(text string, treeSet *Tree) (tree *Tree) {
	t.startParse(lex(t.Name, []byte(text)))
	t.text = text
	t.parse(treeSet)
	return t
}

// parse is where items are retrieved from the parser and dispatched according to the itemElement type.
func (t *Tree) parse(tree *Tree) {
	for {
		var n interface{}

		token := t.next(1)
		if token == nil || token.Type == itemEOF {
			break
		}

		t.log.WithFields(log.Fields{"token": fmt.Sprintf("%+#v", token)}).Info("Parser got token")

		switch token.Type {
		case itemText:
			t.paragraph(token)
		case itemInlineEmphasisOpen:
			t.inlineEmphasis(token)
		case itemInlineStrongOpen:
			t.inlineStrong(token)
		case itemInlineLiteralOpen:
			t.inlineLiteral(token)
		case itemInlineInterpretedTextOpen:
			t.inlineInterpretedText(token)
		case itemInlineInterpretedTextRoleOpen:
			t.inlineInterpretedTextRole(token)
		case itemTransition:
			newTransition(token)
		case itemCommentMark:
			t.comment(token)
		case itemSectionAdornment:
			t.section(token)
		case itemEnumListArabic:
			n = t.enumList(token)
			// FIXME: This is only until enumerated list are properly implemented.
			if n == nil {
				continue
			}
		case itemSpace:
			// //
			// //  FIXME: Blockquote parsing is NOT fully implemented.
			// //
			// if t.peekBack(1).Type == itemBlankLine && t.indentLevel == 0 {
			// t.blockquote(token)
			// }
			// if n == nil {
			// // The calculated indent level was the same as the current indent level.
			// continue
			// }
		case itemBlankLine, itemTitle, itemEscape:
			// itemTitle is consumed when evaluating itemSectionAdornment
			continue
		case itemBlockQuote:
			t.blockquote(token)
		case itemDefinitionTerm:
			t.definitionTerm(token)
		case itemBullet:
			t.bulletList(token)
		default:
			err := fmt.Errorf("Token type: %q is not yet supported in the parser", token.Type.String())
			t.log.WithError(err).Error("Invalid token type")
		}
	}
}

func (t *Tree) subParseBodyElements(token *item) {
	t.log.WithFields(log.Fields{"tokenType": token.Type, "tokenText": token.Text}).Debug("subParseBodyElements: Have token")
	switch token.Type {
	case itemText:
		t.paragraph(token)
	case itemInlineEmphasisOpen:
		t.inlineEmphasis(token)
	case itemInlineStrongOpen:
		t.inlineStrong(token)
	case itemInlineLiteralOpen:
		t.inlineLiteral(token)
	case itemInlineInterpretedTextOpen:
		t.inlineInterpretedText(token)
	case itemInlineInterpretedTextRoleOpen:
		t.inlineInterpretedTextRole(token)
	case itemCommentMark:
		t.comment(token)
	case itemEnumListArabic:
		t.enumList(token)
	case itemSpace:
		if t.peekBack(1).Type == itemBlankLine && t.indentLevel == 0 {
			t.blockquote(token)
		}
	case itemBlankLine, itemEscape:
	case itemBlockQuote:
		t.blockquote(token)
	case itemDefinitionTerm:
		t.definitionTerm(token)
	// case itemBullet:
	// t.bulletListItem(token)
	default:
		err := fmt.Errorf("Token type: %q is not yet supported in the parser", token.Type.String())
		t.log.WithError(err).Error("Invalid token type")
	}
}

// backup shifts the token buffer right one position.
func (t *Tree) backup() {
	t.token[0] = nil
	for x := len(t.token) - 1; x > 0; x-- {
		t.token[x] = t.token[x-1]
		t.token[x-1] = nil
	}
}

// peekBack uses the token buffer to "look back" a number of positions (pos). Looking back more positions than the
// Tree.token buffer allows (3) will generate a panic.
func (t *Tree) peekBack(pos int) *item {
	return t.token[zed-pos]
}

func (t *Tree) peekBackTo(item itemElement) (tok *item) {
	for i := zed - 1; i >= 0; i-- {
		if t.token[i] != nil && t.token[i].Type == item {
			tok = t.token[i]
			break
		}
	}
	return
}

// peek looks ahead in the token stream a number of positions (pos) and gets the next token from the lexer. A pointer to the
// token is kept in the Tree.token buffer. If a token pointer already exists in the buffer, that token is used instead and no
// tokens are received the the lexer stream (channel).
func (t *Tree) peek(pos int) *item {
	nItem := t.token[zed]
	for i := 1; i <= pos; i++ {
		if t.token[zed+i] != nil {
			nItem = t.token[zed+i]
			t.log.WithFields(log.Fields{"node": fmt.Sprintf("%+#v", nItem)}).Debug("peek: Have node")
			continue
		} else {
			if t.lex == nil {
				continue
			}
			t.log.Debug("peek: Getting next item")
			t.token[zed+i] = t.lex.nextItem()
			nItem = t.token[zed+i]
		}
	}
	return nItem
}

// peekSkip looks ahead one position skipiing a specified itemElement. If that element is found, a pointer is returned,
// otherwise nil is returned.
func (t *Tree) peekSkip(iSkip itemElement) *item {
	var nItem *item
	count := 1
	for {
		nItem = t.peek(count)
		if nItem.Type != iSkip {
			break
		}
		count++
	}
	return nItem
}

// next is the workhorse of the parser. It is repsonsible for getting the next token from the lexer stream (channel). If the
// next token already exists in the token buffer, than the token buffer is shifted left and the pointer to the "zed" token is
// returned. pos specifies the number of times to call next.
func (t *Tree) next(pos int) *item {
	if pos == 0 {
		return t.token[zed]
	}
	for x := 0; x < len(t.token)-1; x++ {
		t.token[x] = t.token[x+1]
		t.token[x+1] = nil
	}
	if t.token[zed] == nil && t.lex != nil {
		t.token[zed] = t.lex.nextItem()
	}
	pos--
	if pos > 0 {
		t.next(pos)
	}
	return t.token[zed]
}

// clearTokens sets tokens from begin to end to nil.
func (t *Tree) clearTokens(begin, end int) {
	for i := begin; i <= end; i++ {
		t.token[i] = nil
	}
}

// section is responsible for parsing the title, overline, and underline tokens returned from the parser. If there are errors
// parsing these elements, than a systemMessage is generated and added to Tree.Nodes.
func (t *Tree) section(i *item) Node {
	var overAdorn, indent, title, underAdorn *item

	pBack := t.peekBack(1)
	pFor := t.peekSkip(itemSpace)
	tZedLen := t.token[zed].Length

	if pFor != nil && pFor.Type == itemTitle {
		// Section with overline
		pBack := t.peekBack(1)
		// Check for errors
		if tZedLen < 3 && tZedLen != pFor.Length {
			t.next(2)
			bTok := t.peekBack(1)
			if bTok != nil && bTok.Type == itemSpace {
				t.next(2)
				m := infoUnexpectedTitleOverlineOrTransition
				return t.systemMessage(m)
			}
			return t.systemMessage(infoOverlineTooShortForTitle)
		} else if pBack != nil && pBack.Type == itemSpace {
			// Indented section (error) The section title has an indented overline
			m := severeUnexpectedSectionTitleOrTransition
			return t.systemMessage(m)
		}

		overAdorn = i
		t.next(1)

	loop:
		for {
			switch tTok := t.token[zed]; tTok.Type {
			case itemTitle:
				title = tTok
				t.next(1)
			case itemSpace:
				indent = tTok
				t.next(1)
			case itemSectionAdornment:
				underAdorn = tTok
				break loop
			}
		}
	} else if pBack != nil && (pBack.Type == itemTitle || pBack.Type == itemSpace) {
		// Section with no overline Check for errors
		if pBack.Type == itemSpace {
			pBack := t.peekBack(2)
			if pBack != nil && pBack.Type == itemTitle {
				// The section underline is indented
				m := severeUnexpectedSectionTitle
				return t.systemMessage(m)
			}
		} else if tZedLen < 3 && tZedLen != pBack.Length {
			// Short underline
			return t.systemMessage(infoUnderlineTooShortForTitle)
		}
		// Section OKAY
		title = t.peekBack(1)
		underAdorn = i

	} else if pFor != nil && pFor.Type == itemText {
		// If a section contains an itemText, it is because the underline is missing, therefore we generate an
		// error based on what follows the itemText.
		t.next(2) // Move the token buffer past the error tokens
		if tZedLen < 3 && tZedLen != pFor.Length {
			t.backup()
			return t.systemMessage(infoOverlineTooShortForTitle)
		} else if p := t.peek(1); p != nil && p.Type == itemBlankLine {
			m := severeMissingMatchingUnderlineForOverline
			return t.systemMessage(m)
		}
		return t.systemMessage(severeIncompleteSectionTitle)
	} else if pFor != nil && pFor.Type == itemSectionAdornment {
		// Missing section title
		t.next(1) // Move the token buffer past the error token
		return t.systemMessage(errorInvalidSectionOrTransitionMarker)
	} else if pFor != nil && pFor.Type == itemEOF {
		// Missing underline and at EOF
		return t.systemMessage(errorInvalidSectionOrTransitionMarker)
	}

	if overAdorn != nil && overAdorn.Text != underAdorn.Text {
		return t.systemMessage(severeOverlineUnderlineMismatch)
	}

	// Determine the level of the section and where to append it to in t.Nodes
	sec := newSection(title, overAdorn, underAdorn, indent)
	t.log.WithFields(log.Fields{"sectionLevel": sec.UnderLine.Rune}).Debug("section: Adding sectionLevel")

	msg := t.sectionLevels.Add(sec)
	if msg != parserMessageNil {
		t.log.Debug("Found inconsistent section level!")
		return t.systemMessage(severeTitleLevelInconsistent)
	}

	sec.Level = t.sectionLevels.lastSectionNode.Level
	if sec.Level == 1 {
		t.log.Debug("Setting nodeTarget to Tree.Nodes!")
		t.nodeTarget = &t.Nodes
	} else {
		lSec := t.sectionLevels.lastSectionNode
		if sec.Level > 1 {
			lSec = t.sectionLevels.LastSectionByLevel(sec.Level - 1)
		}
		t.nodeTarget = &lSec.NodeList
	}

	// The following checks have to be made after the SectionNode has been initialized so that any parserMessages can be
	// appended to the SectionNode.NodeList.
	oLen := title.Length
	if indent != nil {
		oLen = indent.Length + title.Length
	}

	if overAdorn != nil && oLen > overAdorn.Length {
		m := warningShortOverline
		sec.NodeList = append(sec.NodeList, t.systemMessage(m))
	} else if overAdorn == nil && title.Length != underAdorn.Length {
		m := warningShortUnderline
		sec.NodeList = append(sec.NodeList, t.systemMessage(m))
	}
	return sec
}

func (t *Tree) comment(i *item) {
	var n Node
	if t.peek(1).Type == itemBlankLine {
		t.log.Debug("Found empty comment block")
		n := newComment(&item{StartPosition: i.StartPosition, Line: i.Line})
		t.nodeTarget.append(n)
		return
	}
	if nSpace := t.peek(1); nSpace != nil && nSpace.Type != itemSpace {
		// The comment element itself is valid, but we need to add it to the NodeList before the systemMessage.
		t.log.Warn("Missing space after comment mark! (warningExplicitMarkupWithUnIndent)")
		n = newComment(&item{Line: i.Line})
		sm := t.systemMessage(warningExplicitMarkupWithUnIndent)
		t.nodeTarget.append(n, sm)
		return
	}
	nPara := t.peek(2)
	if nPara != nil && nPara.Type == itemText {
		t.next(2)
		if t.peek(1).Type == itemSpace && t.peek(2).Type == itemText {
			t.log.Debug("Found NodeComment block")
			t.next(2)
			for {
				nPara.Text += "\n" + t.token[zed].Text
				if t.peek(1).Type == itemSpace && t.peek(2).Type == itemText {
					t.next(2)
				} else {
					break
				}
			}
			nPara.Length = len(nPara.Text)
		} else if z := t.peek(1); z != nil && z.Type != itemBlankLine && z.Type != itemCommentMark && z.Type != itemEOF {
			// A valid comment contains a blank line after the comment block
			t.log.Debug("Found warningExplicitMarkupWithUnIndent")
			n = newComment(nPara)
			sm := t.systemMessage(warningExplicitMarkupWithUnIndent)
			t.nodeTarget.append(n)
			t.nodeTarget.append(sm)
			return
		} else {
			t.log.Debug("Found NodeComment")
		}
		n = newComment(nPara)
	}
	t.nodeTarget.append(n)
	return
}

// systemMessage generates a Node based on the passed parserMessage. The generated message is returned as a
// SystemMessageNode.
func (t *Tree) systemMessage(err parserMessage) Node {
	var lbText string
	var lbTextLen int
	var backToken int

	s := newSystemMessage(&item{Type: itemSystemMessage, Line: t.token[zed].Line}, err)
	msg := newText(&item{
		Text:   err.Message(),
		Length: len(err.Message()),
	})

	t.log.WithField("systemMessage", err).Debug("systemMessage: Have systemMessage")
	t.log.Debug("systemMessage: Adding msg to system message NodeList")
	s.NodeList.append(msg)

	var overLine, indent, title, underLine, newLine string

	switch err {
	case infoOverlineTooShortForTitle:
		var inText string
		if t.token[zed-2] != nil {
			inText = t.token[zed-2].Text + "\n" + t.token[zed-1].Text + "\n" + t.token[zed].Text
			s.Line = t.token[zed-2].Line
			t.token[zed-2] = nil
		} else {
			inText = t.token[zed-1].Text + "\n" + t.token[zed].Text
			s.Line = t.token[zed-1].Line
		}
		infoTextLen := len(inText)
		// Modify the token buffer to change the current token to a itemText then backup the token buffer so the
		// next loop gets the new paragraph
		t.token[zed-1] = nil
		t.token[zed].Type = itemText
		t.token[zed].Text = inText
		t.token[zed].Length = infoTextLen
		t.token[zed].Line = s.Line
		t.backup()
	case infoUnexpectedTitleOverlineOrTransition:
		oLin := t.peekBackTo(itemSectionAdornment)
		titl := t.peekBackTo(itemTitle)
		uLin := t.token[zed]
		inText := oLin.Text + "\n" + titl.Text + "\n" + uLin.Text
		s.Line = oLin.Line
		t.clearTokens(zed-4, zed-1)
		infoTextLen := len(inText)
		// Modify the token buffer to change the current token to a itemText then backup the token buffer so the
		// next loop gets the new paragraph
		t.token[zed].Type = itemText
		t.token[zed].Text = inText
		t.token[zed].Length = infoTextLen
		t.token[zed].Line = s.Line
		t.token[zed].StartPosition = oLin.StartPosition
		t.backup()
	case infoUnderlineTooShortForTitle:
		inText := t.token[zed-1].Text + "\n" + t.token[zed].Text
		infoTextLen := len(inText)
		s.Line = t.token[zed-1].Line
		// Modify the token buffer to change the current token to a itemText then backup the token buffer so the
		// next loop gets the new paragraph
		t.token[zed-1] = nil
		t.token[zed].Type = itemText
		t.token[zed].Text = inText
		t.token[zed].Length = infoTextLen
		t.token[zed].Line = s.Line
		t.backup()
	case warningShortOverline, severeOverlineUnderlineMismatch:
		backToken = zed - 2
		if t.peekBack(2).Type == itemSpace {
			backToken = zed - 3
			indent = t.token[zed-2].Text
		}
		overLine = t.token[backToken].Text
		title = t.token[zed-1].Text
		underLine = t.token[zed].Text
		newLine = "\n"
		lbText = overLine + newLine + indent + title + newLine + underLine
		s.Line = t.token[backToken].Line
		lbTextLen = len(lbText)
	case warningShortUnderline, severeUnexpectedSectionTitle:
		backToken = zed - 1
		if t.peekBack(1).Type == itemSpace {
			backToken = zed - 2
		}
		lbText = t.token[backToken].Text + "\n" + t.token[zed].Text
		lbTextLen = len(lbText)
		s.Line = t.token[zed-1].Line
	case warningExplicitMarkupWithUnIndent:
		s.Line = t.token[zed+1].Line
	case errorInvalidSectionOrTransitionMarker:
		lbText = t.token[zed-1].Text + "\n" + t.token[zed].Text
		s.Line = t.token[zed-1].Line
		lbTextLen = len(lbText)
	case severeIncompleteSectionTitle,
		severeMissingMatchingUnderlineForOverline:
		lbText = t.token[zed-2].Text + "\n" + t.token[zed-1].Text + t.token[zed].Text
		s.Line = t.token[zed-2].Line
		lbTextLen = len(lbText)
	case severeUnexpectedSectionTitleOrTransition:
		lbText = t.token[zed].Text
		lbTextLen = len(lbText)
		s.Line = t.token[zed].Line
	case severeTitleLevelInconsistent:
		if t.peekBack(2).Type == itemSectionAdornment {
			lbText = t.token[zed-2].Text + "\n" + t.token[zed-1].Text + "\n" + t.token[zed].Text
			lbTextLen = len(lbText)
			s.Line = t.token[zed-2].Line
		} else {
			lbText = t.token[zed-1].Text + "\n" + t.token[zed].Text
			lbTextLen = len(lbText)
			s.Line = t.token[zed-1].Line
		}
	}

	if lbTextLen > 0 {
		lb := newLiteralBlock(&item{Type: itemLiteralBlock, Text: lbText, Length: lbTextLen})
		s.NodeList = append(s.NodeList, lb)
	}

	t.Messages.append(s)

	return s
}

var lastEnum *EnumListNode

func (t *Tree) enumList(i *item) (n Node) {
	// FIXME: This function is COMPLETELY not final. It is only setup for passing section test TitleNumberedGood0100.
	var eNode *EnumListNode
	var affix *item
	if lastEnum == nil {
		t.next(1)
		affix = t.token[zed]
		t.next(1)
		eNode = newEnumListNode(i, affix)
		t.next(1)
		eNode.NodeList.append(newParagraph(t.token[zed]))
	} else {
		t.next(3)
		lastEnum.NodeList.append(newParagraph(t.token[zed]))
		return nil
	}
	lastEnum = eNode
	return eNode
}

func (t *Tree) paragraph(i *item) {
	np := newParagraph(i)
	t.nodeTarget.append(np)
	t.nodeTarget = &np.NodeList
outer:
	for {
		ni := t.next(1)
		if ni == nil {
			t.log.Debug("t.paragraph: ni == nil, breaking")
			break
		}
		if ni.Type == itemText {
			switch pn := t.nodeTarget.lastNode().(type) {
			case *TextNode:
				// Merge current itemText  with previous TextNode that has already been inserted into the
				// NodeList.
				pn.Text += "\n" + ni.Text
				pn.Length = len(pn.Text)
				continue
			default:
				// The previous node is not of type TextNode, this will start a new TextNode
			}
		}
		switch ni.Type {
		case itemText:
			nt := newText(ni)
			for {
				// Loop merging itemText into a single NodeText
				ni := t.next(1)
				if ni != nil && ni.Type != itemEscape && ni.Type != itemText {
					break
				}
				if ni.Type == itemEscape {
					continue
				}
				if pn := t.peek(1); pn != nil && pn.Type == itemEscape {
					// Next item is itemEscape
					if pn2 := t.peek(2); pn2 != nil && (pn2.Type == itemText && pn.Line < pn2.Line) {
						// Next item is escaped newline, merge text with current and add explicit
						// '\n'
						ni.Text += "\n" + ni.Text
					}
				} else {
					nt.Text += ni.Text
				}
			}
			nt.Length = len(nt.Text)
			t.nodeTarget.append(nt)
		case itemInlineEmphasisOpen:
			t.inlineEmphasis(ni)
		case itemInlineStrongOpen:
			t.inlineStrong(ni)
		case itemInlineLiteralOpen:
			t.inlineLiteral(ni)
		case itemInlineInterpretedTextOpen:
			t.inlineInterpretedText(ni)
		case itemInlineInterpretedTextRoleOpen:
			t.inlineInterpretedTextRole(ni)
		case itemCommentMark:
			t.comment(ni)
		case itemEnumListArabic:
			t.enumList(ni)
		case itemBlankLine:
			t.log.Debug("Found newline, closing paragraph")
			break outer
		}
	}
	t.nodeTarget = &t.Nodes
}

func (t *Tree) inlineEmphasis(i *item) {
	t.next(1)
	t.nodeTarget.append(newInlineEmphasis(t.token[zed]))
	t.next(1)
}

func (t *Tree) inlineStrong(i *item) {
	t.next(1)
	t.nodeTarget.append(newInlineStrong(t.token[zed]))
	t.next(1)
}

func (t *Tree) inlineLiteral(i *item) {
	t.next(1)
	t.nodeTarget.append(newInlineLiteral(t.token[zed]))
	t.next(1)
}

func (t *Tree) inlineInterpretedText(i *item) {
	t.next(1)
	n := newInlineInterpretedText(t.token[zed])
	t.nodeTarget.append(n)
	t.next(1)
	if t.peek(1).Type == itemInlineInterpretedTextRoleOpen {
		t.next(2)
		n.NodeList.append(newInlineInterpretedTextRole(t.token[zed]))
		t.next(1)
	}
}

func (t *Tree) inlineInterpretedTextRole(i *item) {
	t.next(1)
	t.nodeTarget.append(newInlineInterpretedTextRole(t.token[zed]))
	t.next(1)
}

func (t *Tree) blockquote(i *item) {
	//
	//  FIXME: Blockquote parsing is NOT fully implemented.
	//
	s := i
	if i.Type != itemSpace {
		// If i is not itemSpace, it is a itemBlockQuote. In that case we will get the last itemSpace token found to
		// use for the indent level calculation.
		s = t.peekBackTo(itemSpace)
	}
	level := s.Length / t.indentWidth
	t.log.WithFields(log.Fields{"t.indentLevel": t.indentLevel, "level": level}).Debugf("blockquote: indent level")

	if t.indentLevel == level {
		t.log.Debug("blockquote: t.indentLevel == level")
		i.Type = itemText
		t.Nodes.append(newParagraph(i))
		return
	}

	if i.Type == itemSpace {
		if t.peek(1).Type != itemBlockQuote {
			t.log.Debug("blockquote: t.peek(1) != itemBlockQuote")
			t.indentLevel = level
			nnb := newBlockQuote(i, level)
			t.Nodes.append(nnb)
			t.nodeTarget = &nnb.NodeList
		}
		t.log.Debug("Next item is itemBlockQuote")
		return
	}

	levelChanged := false
	if t.indentLevel != level {
		t.log.WithField("indentLevel", level).Debug("blockquote: Setting indentLevel (t.indentLevel != level)")
		t.indentLevel = level
		levelChanged = true
	}

	var sec Node
	n := *i
	if levelChanged {
		t.token[zed+1] = &n
		t.indentLevel = level
		sec = newBlockQuote(i, level)
		t.next(1)
	}
	t.Nodes.append(sec)
}

func (t *Tree) definitionTerm(i *item) Node {
	sec := t.definitionList
	if sec == nil {
		sec = newDefinitionList(&item{Line: i.Line})
		t.definitionList = sec
		t.nodeTarget.append(sec)
		t.next(1)
	}
	t.nodeTarget = &sec.NodeList

	// Container for definition items
	dli := newDefinitionListItem(i, t.peek(1))
	t.nodeTarget.append(dli)
	t.nodeTarget = &dli.Definition.NodeList

	// Gather definitions and body elements
	for {
		ni := t.next(1)
		if ni == nil {
			break
		}
		pb := t.peekBack(1)
		if ni.Type == itemSpace {
			continue
		} else if ni.Type == itemCommentMark && (pb != nil && pb.Type != itemSpace) {
			// Comment at start of the line breaks current definition list
			t.nodeTarget = &t.Nodes
			t.backup()
			t.definitionList = nil
			break
		} else if ni.Type == itemDefinitionText {
			np := newParagraph(ni)
			dli.Definition.NodeList.append(np)
			t.nodeTarget = &np.NodeList
			t.next(1)
			continue
		} else if ni.Type == itemDefinitionTerm {
			t.nodeTarget = &sec.NodeList
			t.definitionTerm(ni)
			continue
		}
		if ni.Type == itemEOF {
			break
		}
		t.nodeTarget = &dli.Definition.NodeList
		t.subParseBodyElements(ni)
	}

	return sec
}

func (t *Tree) bulletList(i *item) {
	//
	// FIXME: Bullet List Parsing is NOT fully implemented
	//
	bl := t.openBulletList
	if bl == nil {
		bl = newBulletListNode(i)
		t.openBulletList = bl
		t.nodeTarget.append(bl)
		t.next(1)
	}
	t.nodeTarget = &bl.NodeList
	bli := newBulletListItemNode(i)
	t.nodeTarget.append(bli)
	t.nodeTarget = &bli.NodeList
	for {
		ni := t.next(1)
		t.log.WithFields(log.Fields{"token": fmt.Sprintf("%+#v", ni)}).Debug("bulletList: Have token")
		if ni == nil {
			break
		} else if ni.Type == itemSpace {
			// Ignore SPACE until we properly implement bullet list parsing
			continue
		}
		if ni.Type == itemEOF {
			break
		}
		t.subParseBodyElements(ni)
	}
}
